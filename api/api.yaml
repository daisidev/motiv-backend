openapi: 3.0.0
info:
  title: Motiv API
  version: 1.0.0
  description: API for the Motiv event platform.

servers:
  - url: /api/v1

paths:
  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: API is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
                  version:
                    type: string
  /auth/signup:
    post:
      summary: User signup
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'

  /users/me:
    get:
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/me/tickets:
    get:
      summary: Get tickets for the current user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'

  /users/me/wishlist:
    get:
      summary: Get user's wishlist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of events in wishlist
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Add an event to the wishlist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                eventId:
                  type: string
      responses:
        '200':
          description: Event added to wishlist

  /events:
    get:
      summary: List all events
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /events/{id}:
    get:
      summary: Get event by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /events/{id}/reviews:
    get:
      summary: Get reviews for an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'

  /events/{id}/analytics:
    get:
      summary: Get analytics for an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event analytics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAnalytics'

  /events/{id}/revenue:
    get:
      summary: Get revenue for an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event revenue
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalRevenue:
                    type: number

  /events/{id}/view:
    post:
      summary: Record a view for an event
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event view recorded

  /hosts/me/events:
    get:
      summary: Get events created by the logged-in host
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Create a new event
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /hosts/me/events/{id}:
    put:
      summary: Update an event
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEvent'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      summary: Delete an event
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Event deleted successfully

  /hosts/me/analytics/dashboard:
    get:
      summary: Get dashboard stats for the logged-in host
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostAnalytics'

  /hosts/me/analytics/revenue:
    get:
      summary: Get monthly revenue for the logged-in host
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Monthly revenue
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    month:
                      type: string
                    revenue:
                      type: number

  /hosts/me/reviews:
    get:
      summary: Get reviews for the logged-in host
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'

  /hosts/me/payments/earnings:
    get:
      summary: Get earnings for the logged-in host
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Host earnings
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalEarnings:
                    type: number
                  pendingPayout:
                    type: number
                  lastPayout:
                    type: number

  /hosts/me/payments/payouts:
    get:
      summary: Get payouts for the logged-in host
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of payouts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payout'

  /hosts/me/payments/pending:
    get:
      summary: Get pending payouts for the logged-in host
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of pending payouts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payout'

  /reviews:
    post:
      summary: Create a new review
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewReview'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'

  /reviews/{id}:
    put:
      summary: Update a review
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReview'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
    delete:
      summary: Delete a review
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Review deleted successfully

  /reviews/{id}/helpful:
    post:
      summary: Mark a review as helpful
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review marked as helpful

  /tickets/purchase:
    post:
      summary: Purchase a ticket
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseTicketRequest'
      responses:
        '201':
          description: Ticket purchased successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'

  /payments/webhook:
    post:
      summary: Payment webhook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook received

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
        avatar:
          type: string
        role:
          type: string
          enum: [guest, host, admin, superhost]

    NewUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
          enum: [guest, host]

    UpdateUser:
      type: object
      properties:
        name:
          type: string
        avatar:
          type: string

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        token:
          type: string

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        startTime:
          type: string
        endTime:
          type: string
        location:
          type: string
        tags:
          type: array
          items:
            type: string
        bannerImageURL:
          type: string
        hostId:
          type: string
          format: uuid
        status:
          type: string
          enum: [draft, active, cancelled]

    NewEvent:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        startTime:
          type: string
        endTime:
          type: string
        location:
          type: string
        tags:
          type: array
          items:
            type: string
        bannerImageURL:
          type: string

    UpdateEvent:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        startTime:
          type: string
        endTime:
          type: string
        location:
          type: string
        tags:
          type: array
          items:
            type: string
        bannerImageURL:
          type: string
        status:
          type: string
          enum: [draft, active, cancelled]

    Ticket:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        ticketTypeId:
          type: string
          format: uuid
        qrCode:
          type: string

    TicketType:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        name:
          type: string
        price:
          type: number
        quantity:
          type: integer

    PurchaseTicketRequest:
      type: object
      properties:
        ticketTypeId:
          type: string
          format: uuid
        quantity:
          type: integer

    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        rating:
          type: integer
        comment:
          type: string
        helpful:
          type: integer

    NewReview:
      type: object
      properties:
        eventId:
          type: string
          format: uuid
        rating:
          type: integer
        comment:
          type: string

    UpdateReview:
      type: object
      properties:
        rating:
          type: integer
        comment:
          type: string

    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        ticketId:
          type: string
          format: uuid
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
          enum: [pending, completed, failed, refunded]
        method:
          type: string
          enum: [bank_transfer, card, wallet]
        reference:
          type: string
        processedAt:
          type: string
          format: date-time
        failureReason:
          type: string

    Payout:
      type: object
      properties:
        id:
          type: string
          format: uuid
        hostId:
          type: string
          format: uuid
        eventId:
          type: string
          format: uuid
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
          enum: [pending, completed, failed, refunded]
        method:
          type: string
          enum: [bank_transfer, card, wallet]
        reference:
          type: string
        processedAt:
          type: string
          format: date-time
        payoutDate:
          type: string
          format: date-time

    EventAnalytics:
      type: object
      properties:
        totalViews:
          type: integer
        uniqueViews:
          type: integer
        ticketsSold:
          type: integer
        revenue:
          type: number
        conversionRate:
          type: number
        wishlistAdds:
          type: integer

    HostAnalytics:
      type: object
      properties:
        totalEvents:
          type: integer
        totalRevenue:
          type: number
        totalAttendees:
          type: integer
        totalViews:
          type: integer
        averageRating:
          type: number